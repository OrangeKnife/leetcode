Lowest Common Ancestor of a Binary Search Tree

Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”

        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
        TreeNode* leftFound = NULL,*rightFound = NULL,*selfFound = NULL;
        if(root->val == p->val || root->val == q->val)
            selfFound = root;
        
        if(root->left)
        {
            leftFound = lowestCommonAncestor(root->left, p, q);
        }
        
        if(root->right)
        {
            rightFound = lowestCommonAncestor(root->right, p, q);
        }
        
        if(leftFound != NULL && rightFound != NULL || selfFound != NULL &&(leftFound != NULL || rightFound != NULL) )
            return root;
            
        if(selfFound)
            return selfFound;
        
        if(leftFound)
            return leftFound;
        
        if(rightFound)
            return rightFound;
        
        return NULL;
        
    }
};


//solution, so , check the root node , see if root val == p or q val, which means currnt checking node is one of p or q
//once you found left side or right side contains p or q, return root
//also, if root val != p or q's val, return root only when left side has p or q, right side has p or q
//these are the only conditions you can return 

//otherwise, return the node you checked contains one of p or q
//if no val is found, return NULL

//this is a solution just verify all the nodes, return when conditions meet.

