Palindrome Partitioning

Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

For example, given s = "aab",
Return

  [
    ["aa","b"],
    ["a","a","b"]
  ]

class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ret;
        
        for(int i = 0; i < s.size(); ++i)
        {
            vector<string> currentCombination;
            check(s, i, ret, currentCombination);
        }
        
        return ret;
    }
    
    void check(string currentStr, int currentP,  vector<vector<string>>& ret, vector<string>& currentCombination)
    {
        if(currentP == currentStr.size() - 1 && IsPalindrome(currentStr))
        {
            currentCombination.push_back(currentStr);
            ret.push_back(currentCombination);
            return;
        }
        
        string frontStr = currentStr.substr(0, currentP + 1);
        
        if(IsPalindrome(frontStr))
        {
            currentCombination.push_back(frontStr);
            string backStr = currentStr.substr(currentP + 1, currentStr.size() - currentP - 1);
            for(int i = 0; i < backStr.size(); ++i)
            {
                vector<string> newCombination = currentCombination;
                check(backStr, i, ret, newCombination);
            }
        }
        else
            return;
    }
    
    bool IsPalindrome(string& aStr)
    {
        int len = aStr.size();
        for(int i = 0; i < len/2; ++i)
        {
            if(aStr[i] != aStr[len-1-i])
                return false;
        }
        
        return true;
    }
};

//straight forward solution, from left to right, check first char, first 2 chars ... , if it's a palindrome, check the rest of the
//string see if can be partioned, until the pointer hits the last character, push to ret.
 
