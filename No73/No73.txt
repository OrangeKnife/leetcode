Set Matrix Zeroes


Given a m x n matrix, if an element is 0, set its entire row and column to 0. Do it in place.

click to show follow up.

Follow up:
Did you use extra space?
A straight forward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?





/*
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        if(matrix.size() == 0 || matrix[0].size()==0)
            return;
            
        int m = matrix.size(), n = matrix[0].size();
        vector<bool> arow(m), acolumn(n);
        for(int i = 0; i < m; ++i)
        {
            for(int j = 0; j < n; ++j)
            {
                if(matrix[i][j] == 0)
                {
                    arow[i] = true;
                    acolumn[j] = true;
                }
            }
        }
        
        for(int i = 0; i < m; ++i)
        {
            if(arow[i])
                for(int j = 0; j < n; ++j)
                    matrix[i][j] = 0;
        }
        
        
        for(int j = 0; j < n; ++j)
        {
            if(acolumn[j])
                for(int i = 0; i < m; ++i)
                    matrix[i][j] = 0;
        }
    }
};
*/

// use 2 arrays to track whether or not that row or column shall be set to 0
//set at the end
//extra space (m+n)

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        if(matrix.size() == 0 || matrix[0].size()==0)
            return;
            
        int m = matrix.size(), n = matrix[0].size();
        bool firstrow, firstcolumn;
        for(int i = 0; i < m; ++i)
        {
            if( matrix[i][0] == 0)
            {
                firstrow = true;
                break;
            }
        }
        
        for(int j = 0; j < n; ++j)
        {
            if( matrix[0][j] == 0)
            {
                firstcolumn = true;
                break;
            }
        }
        
        for(int i = 1; i < m; ++i)
        {
            for(int j = 1; j < n; ++j)
            {
                if(matrix[i][j] == 0)
                {
                    matrix[i][0] = 0;
                    matrix[0][j] = 0;
                }
            }
        }
        
        for(int i = 1; i < m; ++i)
        {
            if(matrix[i][0] == 0)
                for(int j = 1; j < n; ++j)
                    matrix[i][j] = 0;
        }
        
        
        for(int j = 1; j < n; ++j)
        {
            if(matrix[0][j] == 0)
                for(int i = 1; i < m; ++i)
                    matrix[i][j] = 0;
        }
        
        if(firstrow)
        {
            for(int i = 0; i < m; ++i)
            {
                matrix[i][0] =0;
            }
        }
        
        if(firstcolumn)
        {
            for(int j = 0; j < n; ++j)
                matrix[0][j] = 0;
            
        }
        
    }
};

//second solution is using first row and first column to store zero , and use two extra bool to determine if they are zeroed
//pitfall: when you try to set the matrix from 1-m, 1-n, remember don't try to set first row or column
//otherwise you will get the wrong info.
