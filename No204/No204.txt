Count Primes

Description:

Count the number of prime numbers less than a non-negative number, n.


class Solution {
public:
   int countPrimes(int n) {
   bool* isPrime = new bool[n];
   if( n <= 2)
    return 0;
   int count = n/2;
   for (int i = 2; i < n; i++) {
        if(i % 2 == 1 || i == 2)
            isPrime[i] = true;
        else
            isPrime[i] = false;
   }
   // Loop's ending condition is i * i < n instead of i < sqrt(n)
   // to avoid repeatedly calling an expensive function sqrt().
   for (int i = 3; i * i < n; i+=2) {
      if (!isPrime[i]) continue;
      for (int j = i * i; j < n; j += i) {
         if(isPrime[j])
         {
            isPrime[j] = false;
            count--;
         }
      }
   }
  
   delete[] isPrime;
   return count;
}
    
};

//solution: space trade off time. 
//having a bool array to track odd numbers
//for any odd numbers >= 3, check the array first,
//then use a loop, from i^i to n, step = i, modify the array to be false, reduce the count-- from n/2 
//go through odd numbers from 3 to i^i, count left will be the prime number