Maximum Depth of Binary Tree 


Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        
        return getNodeDepth(root, 1);
    }
    
    int getNodeDepth(TreeNode* nd, int lastDepth)
    {
        if(nd){
           int leftDepth = getNodeDepth(nd->left, lastDepth + 1);
           int rightDepth = getNodeDepth(nd->right, lastDepth + 1);
           return leftDepth > rightDepth ? leftDepth : rightDepth;
        }
        
        return lastDepth - 1;
    }
};


//it is easy. compare left and right depth, return the bigger one, return the depth when node == null.