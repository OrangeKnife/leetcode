Group Anagrams

Given an array of strings, group anagrams together.

For example, given: ["eat", "tea", "tan", "ate", "nat", "bat"], 
Return:

[
  ["ate", "eat","tea"],
  ["nat","tan"],
  ["bat"]
]
Note:
For the return value, each inner list's elements must follow the lexicographic order.
All inputs will be in lower-case.






class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string, vector<string>> myMap;
        for(auto str : strs)
        {
            string hashStr = getHash(str);
            if(myMap.find(hashStr) != myMap.end())
                myMap[hashStr].push_back(str);
            else
            {
                vector<string> vecStr;
                vecStr.push_back(str);
                myMap[hashStr] = vecStr;
            }
        }
        
        vector<vector<string>> ret;
        
        for(auto vecS : myMap)
        {
            sort(vecS.second.begin(),vecS.second.end());
            ret.push_back(vecS.second);
        }
        
        return ret;
        
    }
    
    string getHash(string s)
    {
        string ret;
        int count[26]={0};
        for(auto c : s)
        {
            count[c-'a'] ++;
        }
        
        for(int i = 0; i < 26; ++i)
        {
            for(int j = 0; j < count[i]; ++j)
            {
               ret.push_back(i+'a'); 
            }
        }
        
        return ret;
    }
};


//so this problem is a "string hash table " problem, we need to identify different string using same chars,
//getHash function returns the hash string
//then, we need to save the string into some kind of data structure, I used unordered_map
//the only question here is whether or not need to do a sort before push back to ret
//I don't think it's necessary but the OJ asked for that