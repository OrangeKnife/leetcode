Swap Nodes in Pairs


Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.








/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        ListNode* cur = head;
        ListNode* ret = NULL;
        ListNode* pre = NULL;
        
        while(cur && cur->next)
        {
            ListNode* nextnode = cur->next;
            cur->next = nextnode->next;
            nextnode->next = cur;
            if(!ret)
            {
                ret = nextnode;
            }
            
            if(pre)
            {
                pre->next = nextnode;
            }
            
            pre = cur;
            
            cur=cur->next;
        }
        
        if(!ret)
            ret = head;
            
        return ret;
        
    }
};
//solution is simple
//pitfall:
//1. use pre to link the last swapped back node to current swapped front node
//2. ret pointer shall be the one you already swapped
//swapping is easy, linking other nodes are the hard part