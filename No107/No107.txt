Binary Tree Level Order Traversal II

Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> ret;
        vector<int> levelNodeCount;
        if(!root)
            return ret;
            
        vector<TreeNode*> checkedNodes;
        checkedNodes.push_back(root);
        checkLevelNodes(checkedNodes, ret);
        
        return ret;

    }
    
    void checkLevelNodes(vector<TreeNode*>& levelNodes, vector<vector<int>>& ret)
    {
        vector<TreeNode*> nextLevelNodes;
        vector<int> levelNodesValue;
        
        for(auto node : levelNodes)
        {
            levelNodesValue.push_back(node->val);
            
            if(node->left)
                nextLevelNodes.push_back(node->left);
            if(node->right)
                nextLevelNodes.push_back(node->right);
        }
        
        if(nextLevelNodes.size() > 0)
            checkLevelNodes(nextLevelNodes, ret);
        
        ret.push_back(levelNodesValue);
        
            
            
    }
    
    
};

//solution: because you want to output the deepest node first, so you have to know whether or not
//you have deeper level nodes, I use a vector of nodes to record current level, and check every node
//inside the vector to determin 1) go next level and then push val to ret 2) push val to ret
//I made a mistake, I push the vals to ret before go to next level, the order will be wrong
//so this solution is about recursion, when there is deeper level, do recurse. otherwise push
//vals and return.