Add Two Numbers

You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    
    int carry = 0;
    ListNode* last = NULL, *current=NULL, *ret = NULL;
    while(l1 || l2)
    {
        int num1 = l1 ? l1->val : 0;
        if(l1) l1=l1->next;
        int num2 = l2 ? l2->val : 0;
        if(l2) l2=l2->next;
        
        int digit = (num1 + num2 + carry) % 10;
        carry = (num1 + num2 + carry)/10;
        
        current = new ListNode(digit);
        if(!last)
        {
            ret = current;
            last = current;
        }
        else
        {
            last->next = current;
            last = current;
        }
        
    }
    if(carry > 0)
        last->next = new ListNode(carry);
    return ret;
    }
    
};

// HAHAHA I just made a mistake : out put 8 -> 0 -> 7, much harder to do the reversed order, I used stack to pop the last digit:D 
//PS plz read the problem more carefully