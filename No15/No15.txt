3Sum

Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a <= b <= c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)


/*
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ret;
        if(nums.size() < 3)
            return ret;
        
        sort(nums.begin(), nums.end());
        
        for(int i = 0; i < nums.size() - 2; ++i)
        {
            if(nums[i] > 0)
                break;
                
            if(i - 1 >= 0 && nums[i] == nums[i-1] )
                continue;            
                
            for(int j = i+1; j < nums.size() - 1; ++j)
            {
                if(nums[i] + nums[j] > 0)
                    break;
                if(j-1 >= i+1 && nums[j] == nums[j-1] )
                    continue;      
                
                for(int k = j+1; k < nums.size(); ++k)
                {
                    if(k-1>= j+1 && nums[k] == nums[k-1] )
                        continue;      
                
                    if(nums[k] == -nums[i] - nums[j])
                    {
                        vector<int> oneSet;
                        oneSet.push_back(nums[i]);
                        oneSet.push_back(nums[j]);
                        oneSet.push_back(nums[k]);
                        ret.push_back(oneSet);
                        break;
                    }
                        
                    if(nums[k] > -nums[i] - nums[j])
                        break;
                }
            }
        }
        
        return ret;
            
    }
    
    
};

*/
//solution 1 is so slow, sort the nums, check one by one, I put 3 continue statement there to avoid useless positive number check
//but still slow :(

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ret;
        if(nums.size() < 3)
            return ret;
        
        sort(nums.begin(), nums.end());
        
        for(int i = 0; i < nums.size() - 2; ++i)
        {
            if(nums[i] > 0)
                break;
                
            if(i - 1 >= 0 && nums[i] == nums[i-1] )
                continue;            
                
            int j = i + 1, k = nums.size() - 1;
            
            while(j < k)
            {
                if(nums[i] + nums[j] < -nums[k] )
                {
                    j++;
                    while(nums[j] == nums[j-1]) j++;
                }
                else if(nums[i] + nums[j] > -nums[k])
                {
                    --k;
                    while(nums[k] == nums[k+1]) k--;
                }
                else
                {
                    ret.push_back({nums[i],nums[j],nums[k]});
                    ++j; while(nums[j] == nums[j-1]) j++;
                    --k; while(nums[k] == nums[k+1]) k--;
                }
            }
        }
        
        return ret;
            
    }
    
    
};

//solutoin 2 : instead of use 3 loops, consider search for a pair between j and k, using the same algorithm 2 sum has
//move j right and move k left, remember remove the same number to avoid same result
