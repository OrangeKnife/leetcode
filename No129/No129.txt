Sum Root to Leaf Numbers

Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        int total = 0;
        search(root, 0, total);
        return total;
    }
    
    
    int search(TreeNode* root, int current, int& total)
    {
        if(!root)
            return 0;
        
        int leftpath = -1, rightpath = -1;
        if(root->left)
            leftpath = search(root->left, current*10 + root->val, total);
            
        if(root->right)
            rightpath = search(root->right, current*10 + root->val, total);
            
        if(leftpath == -1 && rightpath == -1)
            total += current*10 + root->val;
    }
};

//easy depth first search