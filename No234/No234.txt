Palindrome Linked List 

Given a singly linked list, determine if it is a palindrome.

Follow up:
Could you do it in O(n) time and O(1) space?


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        bool ret = true;
        ListNode* nd = head;
        int len = 0;
        while(nd)
        {
            len++;
            nd = nd->next;
        }
        
        ListNode* last = NULL;
        ListNode* start = head;
        for(int i = 0; i < len / 2; ++i)
        {
             ListNode* temp = start->next;
             start->next = last;
             last = start;
             start = temp;
        }
        
        ListNode* back = start, *mid = last;
        
        if( (len+1)/2 > len/2 )
            start = start->next;
        
        for(int i = (len+1) / 2; i < len; ++i)
        {
            if(last->val != start->val)
            {
                ret = false;
                break;
            }
            
            last = last->next;
            start = start->next;
        }
        
        
        //reverse back!
        for(int i = len/2 - 1; i >= 0; --i)
        {
             ListNode* temp = mid->next;
             mid->next = back;
             back = mid;
             mid = temp;
        }
        
        return ret;
    }
    
};


//so reverse the first half of the list , and compare the second half one by one, take care of the odd and even length
//so after you finish comparing, remember reverse back the nodes, you don't want to break it , right?