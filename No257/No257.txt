Binary Tree Paths

Given a binary tree, return all root-to-leaf paths.

For example, given the following binary tree:

   1
 /   \
2     3
 \
  5
All root-to-leaf paths are:

["1->2->5", "1->3"]


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> ret;
        if(!root)
            return ret;
            
        checkNode(root, ret, string(""));

        return ret;            
    }
    
    void checkNode(TreeNode* node, vector<string>& ret, string cur)
    {
        
         if(cur.size() == 0)
            cur = to_string(node->val);
        else
            cur = cur + string("->") + to_string(node->val);
        
        if(!node->left && !node->right)
        {
            ret.push_back(cur);
        }
            
        if(node->left)
            checkNode(node->left, ret, cur );
            
        if(node->right)
            checkNode(node->right, ret, cur);
        
    }
};


//solution: check node depth first, passing in &ret and a string having current output
//whenever you found a leaf, add the new val to the end of cur and push back to ret
//a leaf is an end of a path

//PS: take care of the first node because you don't want to addd "->" before the first node
